---
title: "SCLC InferCNV cohort plotting"
author: "Matthew Zatzman"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true
    code-tools: true
    code-link: true
    toc: true
execute:
  cache: false
---

```{r setup}
#| output: false
library(tidyverse)
library(ggthemes)
library(dittoSeq)
library(patchwork)
library(glue)
library(ggplotify)
library(ggh4x)
devtools::load_all("~/work/repos/scatools/")
library(here)
```


Load cohort object

```{r}
sce <- readRDS(here("cnv", "sclc_10mb_merged_sce_tumorcell_assigned_sce.rds"))
sce$is_tumor_cell_confidence <- factor(sce$is_tumor_cell_confidence, levels = c("low", "medium", "high"))

pt_cols <- dittoColors()[1:n_distinct(sce$patient)]
names(pt_cols) <- unique(sce$patient)
```


```{r}
#| fig-width: 16
#| fig-height: 12
pt_size <- 0.25
alpha <- 0.7
raster.dpi <- 30
p1 <- dittoDimPlot(sce, var = "clusters_cohort", do.label = F, size = pt_size, opacity = alpha, do.raster = TRUE, reduction.use = "UMAP_cohort", raster.dpi = raster.dpi) +
  guides(color = guide_legend(override.aes = list(size = 2), ncol = 3))
p2 <- dittoDimPlot(sce, var = "patient", size = pt_size, opacity = alpha, do.raster = TRUE, reduction.use = "UMAP_cohort", raster.dpi = raster.dpi) +
  guides(color = guide_legend(override.aes = list(size = 2), ncol = 3)) +
  scale_color_manual(name = "Patient", values = pt_cols)
p3 <- dittoDimPlot(sce, var = "predicted.ann_level_1", size = pt_size, opacity = alpha, do.raster = TRUE, reduction.use = "UMAP_cohort", raster.dpi = raster.dpi)
p4 <- dittoDimPlot(sce, var = "is_tumor_cell", size = pt_size, opacity = alpha, do.raster = TRUE, reduction.use = "UMAP_cohort", raster.dpi = raster.dpi)
p5 <- dittoDimPlot(sce, var = "is_tumor_cell_confidence", size = pt_size, opacity = alpha, do.raster = TRUE, reduction.use = "UMAP_cohort", raster.dpi = raster.dpi) + scale_color_colorblind()
p6 <- dittoDimPlot(sce, var = "cnv_score2", size = pt_size, opacity = alpha, do.raster = TRUE, reduction.use = "UMAP_cohort") + scale_color_viridis_c(limits = c(min(sce$cnv_score2), 0.05), oob = scales::squish)

pcomb_umap <- wrap_plots(list(p1, p2, p3, p4, p5, p6), ncol = 3) + plot_annotation(title = "SCLC Met Cohort CNV UMAP", tag_levels = "A")

ggsave(filename = here("cnv", "sclc_cohort_cnv_umap.pdf"), plot = pcomb_umap, width = 16, height = 7)

# pcomb_umap
```

```{r}
pcomb_umap <- wrap_plots(list(p1, p2, p3, p4), ncol = 2) + plot_annotation(title = "SCLC Met Cohort CNV UMAP")

ggsave(filename = here("cnv", "sclc_cohort_cnv_umap_v2.pdf"), plot = pcomb_umap, width = 12, height = 7)
```


```{r, fig.width=15, fig.height = 10}
# ht <- cloneCnaHeatmap(sce, assay_name = "counts", clone_name = "clusters_cohort", col_fun = logr_col_fun(breaks = c(-0.05, -0.01, 0.01, 0.05), colors = c("blue", "white", "white", "red")), log2 = T)
# ht
```


```{r}
library(ComplexHeatmap)
# Sample 1000 tumor and 1000 normal cells from each patient

mat <- assay(sce) %>%
  t() %>%
  log2()

df_anno <- colData(sce) %>%
  as.data.frame() %>%
  select(patient, is_tumor_cell, cell_type = predicted.ann_level_1)

df_anno <- df_anno # %>%
# dplyr::filter(cell_type == "Epithelial")

ct_cols <- dittoColors()[1:4]
names(ct_cols) <- unique(df_anno$cell_type)

mat <- mat[rownames(df_anno), ]

# ct_cols <- dittoColors()[1:length(unique(df_anno$cell_type))]
# names(ct_cols) <- sort(unique(df_anno$cell_type))

anno_cols <- list(
  "is_tumor_cell" = c("TRUE" = "grey10", "FALSE" = "grey90"),
  "cell_type" = ct_cols,
  "patient" = pt_cols
)

left_anno <- HeatmapAnnotation(df = df_anno, which = "row", show_legend = c(T, T, T), col = anno_cols)

# Split columns by chromosome
chrs <- as.vector(gsub("chr", "", GenomeInfoDb::seqnames(SummarizedExperiment::rowRanges(sce))))
col_split <- factor(chrs, levels = unique(gtools::mixedsort(chrs)))

ht <- Heatmap(
  matrix = mat,
  name = "Log2Ratio",
  left_annotation = left_anno,
  col = logr_col_fun(breaks = c(-0.1, -0.025, 0.025, 0.1), colors = c("blue", "white", "white", "red")),
  cluster_rows = F,
  cluster_columns = F,
  show_column_dend = F,
  show_row_dend = F,
  show_row_names = F,
  show_column_names = F,
  column_split = col_split,
  row_title = NULL,
  row_split = df_anno$is_tumor_cell,
  raster_by_magick = F, raster_device = "CairoPNG",
  raster_quality = 15
)

pdf(here("cnv/cohort_cnv_heatmap.pdf"), width = 13, height = 8)
draw(ht, column_title = "All Cells")
dev.off()
```

Just epithelial predicted cells

```{r}
df_anno_epi <- df_anno %>%
  dplyr::filter(cell_type == "Epithelial") %>%
  select(patient, is_tumor_cell)

mat_epi <- mat[rownames(df_anno_epi), ]

# ct_cols <- dittoColors()[1:length(unique(df_anno$cell_type))]
# names(ct_cols) <- sort(unique(df_anno$cell_type))

anno_cols_epi <- list(
  "is_tumor_cell" = c("TRUE" = "grey10", "FALSE" = "grey90"),
  "patient" = pt_cols
)

left_anno_epi <- HeatmapAnnotation(df = df_anno_epi, which = "row", show_legend = c(T, T), col = anno_cols_epi)

# Split columns by chromosome
chrs <- as.vector(gsub("chr", "", GenomeInfoDb::seqnames(SummarizedExperiment::rowRanges(sce))))
col_split <- factor(chrs, levels = unique(gtools::mixedsort(chrs)))

ht_epi <- Heatmap(
  matrix = mat_epi,
  name = "Log2Ratio",
  left_annotation = left_anno_epi,
  col = logr_col_fun(breaks = c(-0.1, -0.025, 0.025, 0.1), colors = c("blue", "white", "white", "red")),
  cluster_rows = F,
  cluster_columns = F,
  show_column_dend = F,
  show_row_dend = F,
  show_row_names = F,
  show_column_names = F,
  column_split = col_split,
  row_title = NULL,
  row_split = df_anno_epi$is_tumor_cell,
  raster_by_magick = F, raster_device = "CairoPNG",
  raster_quality = 15
)

pdf(here("cnv/cohort_cnv_heatmap_epi.pdf"), width = 13, height = 8)
draw(ht_epi, column_title = "Epithelial Cells Only")
dev.off()
```



## Pull IMPACT data

Correlate available impact data

```{r}
meta <- readxl::read_excel("SCLC_single_cell_chemoresistance_clinical_samples_annotation.xlsx") %>%
  janitor::clean_names()

# Error in meta table
meta$sample_id[meta$lab_id == "Rudin 1499a"] <- "ru1499a"
meta$patient[meta$lab_id == "Rudin 1499a"] <- "ru1499"

impact_dir <- "/data1/shahs3/users/zatzmanm/work/repos/shared/msk-impact/"

dmp_ids <- meta$dmp_id
dmp_ids <- dmp_ids[dmp_ids != "na"]

# all(dmp_ids %in% segments$ID)

# Load impact cnv data
# Segment data
segments <- readr::read_table(file.path(impact_dir, "msk_solid_heme/mskimpact_data_cna_hg19.seg"), col_types = readr::cols())
segments$dmp_pid <- substr(segments$ID, 1, 9)
segments <- dplyr::filter(segments, ID %in% dmp_ids) %>%
  dplyr::rename(dmp_sample = ID) %>%
  dplyr::mutate(dmp_tumor = substr(dmp_sample, 1, 13)) %>%
  dplyr::relocate(dmp_pid, dmp_tumor, dmp_sample)
segments$chrom <- paste0("chr", segments$chrom)

segments_rebin <- map(unique(segments$dmp_sample), .f = function(s) {
  y <- makeGRangesFromDataFrame(segments[segments$dmp_sample == s, ], keep.extra.columns = T)

  y_rebin <- integrate_segments(x = rowRanges(sce), y = y, granges_signal_colname = "seg.mean", drop_na = FALSE) %>%
    as.data.frame() %>%
    mutate(dmp_sample = s)
  return(y_rebin)
}) %>%
  list_rbind()

segments_rebin$patient <- meta$patient[match(segments_rebin$dmp_sample, meta$dmp_id)]
segments_rebin$samp_lwr <- meta$sample_id[match(segments_rebin$dmp_sample, meta$dmp_id)]

segments_rebin <- dplyr::filter(segments_rebin, patient != "NA") %>%
  mutate(source = "impact")
```


Psuedobulk each patients tumor and non tumor per coarse type and correlate with each segment profile

```{r}
sce$samp_cnv_cls <- paste(sce$samp_lwr, sce$clusters_patient, sep = "_")

bulk <- pseudo_groups(sce[, sce$is_tumor_cell], assay_name = "counts", group_var = "samp_cnv_cls", FUN = mean)

bulk_df <- assay(bulk) %>%
  as.data.frame() %>%
  rownames_to_column("bin_id") %>%
  pivot_longer(cols = !bin_id, values_to = "seg.mean", names_to = "samp_cnv_cls") %>%
  left_join(distinct(as.data.frame(colData(sce))[, c("samp_lwr", "patient", "samp_cnv_cls", "clusters_patient")])) %>%
  group_by(samp_lwr) %>%
  mutate(seg.mean = log2(seg.mean)) %>%
  ungroup() %>%
  mutate(source = "scrna") %>%
  dplyr::filter(patient %in% unique(segments_rebin$patient))
```


Combine, reshape, and perform correlations

```{r}
imp_mat <- segments_rebin %>%
  pivot_wider(id_cols = "bin_id", names_from = "dmp_sample", values_from = "seg.mean")

rna_mat <- bulk_df %>%
  pivot_wider(id_cols = "bin_id", names_from = "samp_cnv_cls", values_from = "seg.mean")


join_mat <- full_join(imp_mat, rna_mat)
```


```{r}
library(easystats)

cor_res <- correlation(data = imp_mat, data2 = rna_mat, method = "spearman")

tmp_df <- distinct(as.data.frame(colData(sce))[, c("samp_cnv_cls", "patient", "clusters_patient")])

cor_res$patient_dmp <- meta$patient[match(cor_res$Parameter1, meta$dmp_id)]
cor_res$patient_rna <- tmp_df$patient[match(cor_res$Parameter2, tmp_df$samp_cnv_cls)]
cor_res$patient_rna_cluster <- tmp_df$clusters_patient[match(cor_res$Parameter2, tmp_df$samp_cnv_cls)]

cor_res$patient_match <- cor_res$patient_dmp == cor_res$patient_rna
```


```{r, fig.width = 11, fig.height = 4}
p1 <- cor_res %>%
  ggplot(aes(x = patient_match, y = rho)) +
  geom_boxplot(aes(fill = patient_match)) +
  ggpubr::geom_pwc() +
  scale_fill_ptol() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  NoLegend() +
  labs(x = NULL, y = "Spearman's rho")


p2 <- cor_res %>%
  ggplot(aes(x = patient_rna, y = rho)) +
  geom_point(pch = 21, aes(fill = patient_match), position = position_jitterdodge(dodge.width = 0.85)) +
  # geom_pointrange(
  #   stat = "summary", aes(color = patient_match),
  #   fun.min = function(z) {
  #     quantile(z, 0.25)
  #   },
  #   fun.max = function(z) {
  #     quantile(z, 0.75)
  #   },
  #   fun = median, position = position_dodge(width = 0.8)
  # ) +
  guides(x = guide_axis(angle = 45)) +
  scale_fill_ptol() +
  facet_grid(. ~ patient_rna, scales = "free", space = "free") +
  theme(
    strip.background = element_blank(), strip.text = element_blank(),
    axis.line = element_blank(),
    panel.border = element_rect(fill = NA)
  ) +
  labs(y = "Spearman's rho", x = "Patient", fill = "Patient Matched Sample\n(IMPACT:scRNA)")


pcomb <- p1 + p2 + plot_layout(widths = c(0.1, 1))
pcomb
ggsave(pcomb, file = here("cnv", "impact_cor.pdf"), width = 11, height = 4)
```
